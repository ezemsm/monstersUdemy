{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","onSearchChange","type","placeholder","onChange","App","event","setState","searchField","target","value","title","console","log","state","fetch","then","response","json","users","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6UAEaA,G,kBAAO,SAACC,GAAD,OAEhB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,wBACtB,gCAAML,EAAMI,QAAQE,KAApB,KACA,+BAAKN,EAAMI,QAAQG,MAAnB,QCHKC,EAAW,SAAAR,GAAK,OACzB,yBAAKC,UAAU,aAEXD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAE1B,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SCH3BQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,eAAH,OACrB,2BACAZ,UAAU,SACVa,KAAK,SACLC,YAAY,kBACZC,SAAWH,MC6FAI,E,kDAzFb,aAAc,IAAD,8BACX,gBA0DJJ,eAAiB,SAAAK,GACf,EAAKC,SAAS,CACZC,YAAaF,EAAMG,OAAOC,MAC1BC,MAAOL,EAAMG,OAAOC,QACpB,kBAAIE,QAAQC,IAAI,EAAKC,WA7DrB,EAAKA,MAAM,CACTjB,SAAS,GAqBTW,YAAa,GACbG,MAAO,IAzBE,E,gEAoDK,IAAD,OACnBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAE,EAAKZ,SAAS,CAACV,SAASsB,S,+BAmBzB,IAAD,EAC+BC,KAAKN,MAApCjB,EADA,EACAA,SAAsBc,GADtB,EACSH,YADT,EACsBG,OAE7B,OACE,yBAAKtB,UAAU,OACb,4BAAKsB,GACL,kBAAC,EAAD,CAAWV,eAAgBmB,KAAKnB,iBAC/B,kBAAC,EAAD,CAAUJ,SAAUA,S,GAlFXwB,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.1952c0e0.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\nexport const Card = (props) => (\n\n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=s2&size=80x80`} />\n        <h2> {props.monster.name} </h2>\n        <p> {props.monster.email} </p>\n    </div>\n)","import React from 'react'\nimport './card-list.styles.css'\nimport { Card } from '../card/card.component'\n\nexport const CardList = props => (\n    <div className='card-list'>\n    {\n        props.monsters.map(monster => (\n        \n        <Card key={monster.id} monster={monster}/>\n        //#4\n        //<h1 key={monster.id}> {monster.name}</h1>\n    \n        //#3\n        //return(<div className='card-list'>{props.children}</div>)\n\n    ))}\n    </div>\n)","import React from 'react';\n\nimport './search-box.styles.css'\n\n\n//note; start with fn methods for easier\nexport const SearchBox = ({ onSearchChange }) => (\n    <input\n    className='search'\n    type='search'\n    placeholder='search monsters'\n    onChange={ onSearchChange } \n    />\n\n);","import React, {Component} from 'react';\nimport './App.css';\nimport{CardList} from './components/card-list/card-list.component'\nimport{SearchBox} from './components/search-box/search-box.component'\n\n//import logo from './logo.svg';\n\n\n//#1\n//creating class allows use of render method\n //also gives the ablity to give state \n\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      monsters:[\n      \n      //#1\n      //string:'hello sam'\n\n      //#2\n      // {\n      //   name: 'Franstien',\n      //   id:'a1'\n      // },\n      // {\n      //   name: 'Dracula',\n      //   id:'a2'\n      // },\n      // {\n      //   name: 'Zombie',\n      //   id:'a3'\n      // },\n      \n      ], \n\n      searchField: '',\n      title: ''\n    \n    }\n  }\n  \n  \n//      #######################inside render App  \n  \n// #1  watch the example for the onclick that will change the state\n//   <header className=\"App-header\">\n//   <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//   <p>\n//   {this.state.string}      \n//   {this.state.string}      \n//   </p>\n//   <button onClick = {()=>this.setState({string:'hello dipshit'})}> \n//     Change Text\n//   </button>\n// </header>\n\n// #2 \n// this.state.monsters.map(monster => (\n//   <h1 key={monster.id} > {monster.name} </h1>  \n \n\n\n//bingo!!!! the solution to load the state from the server!!!\ncomponentDidMount(){\nfetch('https://jsonplaceholder.typicode.com/users')\n.then(response => response.json())\n.then(users=>this.setState({monsters:users}));\n}\n\n\nonSearchChange = event => {\n  this.setState({\n    searchField: event.target.value, \n    title: event.target.value },\n    ()=>console.log(this.state))\n}\n// handleChange = (e) => { \n//   this.setState({ searchField:e.target.value, title: e.target.value },()=>console.log(this.state))\n// }\n\n// #5 setState is asyncronous and lagging behind on the search text filed\n// note that the text will be one behind and must be included on the callback defined by lambda fn in this example\n// setState should not be in render \n// rerednering occurs witht he filteredMonsters using the updated state value of searchField\n// #2 adding keys idea using monster.id monsters is mount\n  render( ){\n    const {monsters,searchField, title} = this.state;\n    //const filteredMonsters  = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className='App'>\n        <h1>{title}</h1>\n        <SearchBox onSearchChange={this.onSearchChange}/>\n         <CardList monsters={monsters} /> \n\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n// <CardList monsters={this.state.monsters} />  good example for simple defiintions and not needing the <> \n// A component should only worry about rendering\n\n\n\n// so when fn has () it will run at the time the code is being set","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}